package com.vectails.data;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.function.Consumer;

import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import com.celera.core.common.GenericFactory;
import com.celera.core.common.IGenericFactory;
import com.vectails.data.IXmlParser.IXmlNode;

import sun.reflect.generics.factory.GenericsFactory;

public interface IXmlParser 
{
	// static public <T> void parseXmlElement(Element root, T t) { // root =
	// <Legs>
	// public default <T> void parseXmlElement(Element root, T t) { // root =
	// <Legs>

	public default Object create()
	{
		Object o = null;
		try
		{
			final Constructor<?> ctr = getClass().getConstructor();
			o = ctr.newInstance();
		} catch (Exception e)
		{
			e.printStackTrace();
		}
		return o;
	}

	public default void parseAttribute(Element root)
	{
		NamedNodeMap m = root.getAttributes();
		int len = m.getLength();
		String nodeName;

		for (int j = 0; j < len; j++)
		{
			Node n = m.item(j);
			nodeName = n.getNodeName();
			try
			{
				Field field = this.getClass().getDeclaredField(nodeName);
				Method setter = this.getClass().getMethod("set" + nodeName, field.getType());
				setter.invoke(this, n.getTextContent());
			} catch (NoSuchFieldException e)
			{
				System.out.println("NoSuchFieldException:" + e.getMessage() + "," + nodeName);
				e.printStackTrace();
			} catch (IllegalArgumentException e)
			{
				System.out.println("IllegalArgumentException:" + e.getMessage() + "," + nodeName);
				e.printStackTrace();
			} catch (Exception e)
			{
				e.printStackTrace();
			}
		}
	}

	public default void parseLeaveNodes(Element root)
	{ // root = <Legs>

		String nodeName = null;

		NodeList nodes = root.getChildNodes();
		int lenNodes = nodes.getLength();
		for (int l = 0; l < lenNodes; l++)
		{ // elements
			Node n = nodes.item(l);

			if (n.getNodeType() == Node.ELEMENT_NODE)
			{
				nodeName = n.getNodeName();
				try
				{
					Field field = this.getClass().getDeclaredField(nodeName);
					if (Collection.class.isAssignableFrom(field.getType()))
					{
						parseLeaveNodes((Element) n);
					} else
					{
						Method setter = this.getClass().getMethod("set" + nodeName,
								// "set" + nodeName.substring(0,
								// 1).toUpperCase() +
								// nodeName.substring(1),
								field.getType());
						setter.invoke(this, n.getTextContent());
					}

				} catch (NoSuchFieldException e)
				{
					System.out.println("NoSuchFieldException:" + e.getMessage() + "," + nodeName);
					e.printStackTrace();
				} catch (Exception e)
				{
					e.printStackTrace();
				}
			}
		}
	}

	public interface IXmlNode<T> 
	{
		public default void parseAttribute(Element root)
		{
			NamedNodeMap m = root.getAttributes();
			int len = m.getLength();
			String nodeName;

			for (int j = 0; j < len; j++)
			{
				Node n = m.item(j);
				nodeName = n.getNodeName();
				try
				{
					Field field = this.getClass().getDeclaredField(nodeName);
					Method setter = this.getClass().getMethod("set" + nodeName, field.getType());
					setter.invoke(this, n.getTextContent());
				} catch (NoSuchFieldException e)
				{
					System.out.println("NoSuchFieldException:" + e.getMessage() + "," + nodeName);
					e.printStackTrace();
				} catch (IllegalArgumentException e)
				{
					System.out.println("IllegalArgumentException:" + e.getMessage() + "," + nodeName);
					e.printStackTrace();
				} catch (Exception e)
				{
					e.printStackTrace();
				}
			}
		}
		
		public default void parseNode(Element root) // root = <Legs>
		{
			parseAttribute(root);

			String nodeName = root.getNodeName();

			NodeList nodes = root.getChildNodes();
			int lenNodes = nodes.getLength();
			for (int l = 0; l < lenNodes; l++)
			{ // elements
				Node n = nodes.item(l);

				if (n.getNodeType() == Node.ELEMENT_NODE)
				{
					nodeName = n.getNodeName();
					try
					{
						Field field = this.getClass().getDeclaredField(nodeName);
						field.setAccessible(true);
						
						if (Collection.class.isAssignableFrom(field.getType()))
						{
//							IXmlNode o = (IXmlNode) GenericFactory.build("com.vectails.data.IXmlParser$" + nodeName);
							
//							((IGenericFactory) this).setClass(Class.forName("com.vectails.data.IXmlParser$" + nodeName));
							IXmlNode o = (IXmlNode)((IGenericFactory) this).build();
							o.parseNode((Element) n);

							Object obj = field.get(this);
							Method m = field.getType().getDeclaredMethod("add", Object.class);
							m.invoke(obj, o);
						} else
						{
							Method setter = this.getClass().getMethod("set" + nodeName, field.getType());
							setter.invoke(this, n.getTextContent());
						}
					} catch (Exception e)
					{
						e.printStackTrace();
					}
				}
			}
		}
//		public default void parseNode(Element root)
//		{ // root = <Legs>
//			
//			String nodeName = root.getNodeName();
//			
//			NodeList nodes = root.getChildNodes();
//			int lenNodes = nodes.getLength();
//			for (int l = 0; l < lenNodes; l++)
//			{ // elements
//				Node n = nodes.item(l);
//				
//				if (n.getNodeType() == Node.ELEMENT_NODE)
//				{
//					nodeName = n.getNodeName();
//					try
//					{
//						Class<?> clazz = Class.forName("com.vectails.data.IXmlParser$" + nodeName);
//						if (IGenericFactory.class.isAssignableFrom(clazz) && IXmlNode.class.isAssignableFrom(clazz))
//						{
//							try
//							{
//								IGenericFactory o = (IGenericFactory) clazz.newInstance();
//								((IXmlNode) o).parseNode((Element) n);
//								System.out.println(nodeName);
//							} catch (InstantiationException | IllegalAccessException e)
//							{
//								e.printStackTrace();
//							}
//						}
//					} catch (ClassNotFoundException e)
//					{
//						e.printStackTrace();
//					}
//				}
//			}
//		}
	}

	public class UtsDirectAccessResponse extends GenericFactory implements IXmlNode 
	{
		public UtsDirectAccessResponse()
		{
			super(DerivativeTypes.class);
		}

		List<IXmlNode> DerivativeTypes = new ArrayList<IXmlNode>();
		List<IXmlNode> Currencies = new ArrayList<IXmlNode>();
		List<IXmlNode> Underlyings = new ArrayList<IXmlNode>();
		List<IXmlNode> IndexFutures = new ArrayList<IXmlNode>();
		List<IXmlNode> AllowedQuoteCreators = new ArrayList<IXmlNode>();
		List<IXmlNode> Addressees = new ArrayList<IXmlNode>();

		public List<IXmlNode> getDerivativeTypes()
		{
			return DerivativeTypes;
		}

		public List<IXmlNode> getCurrencies()
		{
			return Currencies;
		}

		@Override
		public void parseAttribute(Element root){}
		
		@Override
		public void parseNode(Element root) // root = <Legs>
		{
			parseAttribute(root);

			String nodeName = root.getNodeName();

			NodeList nodes = root.getChildNodes();
			int lenNodes = nodes.getLength();
			for (int l = 0; l < lenNodes; l++)
			{ // elements
				Node n = nodes.item(l);

				if (n.getNodeType() == Node.ELEMENT_NODE)
				{
					nodeName = n.getNodeName();
					try
					{
						Field field = this.getClass().getDeclaredField(nodeName);
						field.setAccessible(true);
						
						if (Collection.class.isAssignableFrom(field.getType()))
						{
//							IXmlNode o = null;
//							switch (nodeName) {
//							case "AllowedQuoteCreators":
//								o = (IXmlNode)((IGenericFactory) this).build("com.vectails.data.IXmlParser$AllowedQuoteCreators");	
//								break;
//							case "IndexFutures":
//								o = (IXmlNode)((IGenericFactory) this).build("com.vectails.data.IXmlParser$IndexFutures");	
//								break;
//							case "Underlyings":
//								o = (IXmlNode)((IGenericFactory) this).build("com.vectails.data.IXmlParser$Underlyings");	
//								break;
//							case "Currencies":
//								o = (IXmlNode)((IGenericFactory) this).build("com.vectails.data.IXmlParser$Currencies");	
//								break;
//							case "DerivativeTypes":
//								o = (IXmlNode)((IGenericFactory) this).build("com.vectails.data.IXmlParser$DerivativeTypes");	
//								break;
//							}
							IXmlNode o = (IXmlNode)((IGenericFactory) this).build("com.vectails.data." + nodeName);	
							o.parseNode((Element) n);

							Object obj = field.get(this);
							Method m = field.getType().getDeclaredMethod("add", Object.class);
							m.invoke(obj, o);
						} else
						{
							Method setter = this.getClass().getMethod("set" + nodeName, field.getType());
							setter.invoke(this, n.getTextContent());
						}
					} catch (Exception e)
					{
						e.printStackTrace();
					}
				}
			}
		}
	}


	

	

	

	

	
	

	


	

	

	





	




}
