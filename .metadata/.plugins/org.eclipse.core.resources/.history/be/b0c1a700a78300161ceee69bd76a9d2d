package com.celera.core.common;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.Collection;
import java.util.Iterator;

public class GenericFactory<T> implements IGenericFactory<T> {
	private Class<T> clazz;
	
	public GenericFactory(Class clazz) {
		this.clazz = clazz;
	}

	public void setClass(Class clazz) {
		this.clazz = clazz;
	}

	public T build() throws InstantiationException, IllegalAccessException {
		return clazz.newInstance();
	}
	
	public <Y> Object build(String _clazz) throws InstantiationException, IllegalAccessException, ClassNotFoundException {
		_static_clazz = Class.forName(_clazz);
		return _static_clazz.newInstance();
	}
	
	@Override
	public String toString()
	{
		StringBuilder sb = new StringBuilder();
		sb.append(this.getClass().getSimpleName()).append(" [");

		for (Field field : getClass().getDeclaredFields())
		{
			try
			{
				if (Collection.class.isAssignableFrom(field.getType()))
				{
					field.setAccessible(true);	// unsafe
					Object listObj = field.get(this);
					
					Method mthGet = field.getType().getDeclaredMethod("iterator", null);
					mthGet.setAccessible(true);	// unsafe
					Iterator begin = (Iterator) mthGet.invoke(listObj, null);
					for (Iterator it = begin; it.hasNext(); ) {
						sb.append(it.next().toString()).append(", ");
					}
				} else
				{
					String fieldName = field.getName();
					Method setter = this.getClass().getMethod("get" + fieldName, null);
					String s = (String) setter.invoke(this, null);
					sb.append(fieldName).append("=").append(s).append(", ");
				}

			} catch (Exception e)
			{
				e.printStackTrace();
			}
		}

		sb.append("]");
		return sb.toString();
	}
}