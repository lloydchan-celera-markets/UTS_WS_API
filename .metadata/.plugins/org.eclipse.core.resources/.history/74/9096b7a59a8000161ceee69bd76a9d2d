package com.vectails.data;

import org.apache.cxf.common.i18n.Exception;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

public class DerivativeType implements IXmlParser{
	private String Code;
	private String Name;
	private String IsPriceInPercent;
	private String LegCount;
	private String IsBasic;
	private String UnderlyingClass;
	private String LastUpdateDateTime;;
	
	private String ParameterString;
	
	Legs myLegs = new Legs();
	
//	public DerivativeType(String code, String name, String isPriceInPercent, String legCount, String isBasic,
//			String underlyingClass, String lastUpdateDateTime) {
//		this.Code = code;
//		this.Name = name;
//		this.IsPriceInPercent = Boolean.valueOf(isPriceInPercent);
//		this.LegCount = Integer.valueOf(legCount);
//		this.IsBasic = Boolean.valueOf(isBasic);
//		this.UnderlyingClass = underlyingClass;
//		this.LastUpdateDateTime = lastUpdateDateTime;
//	}

	@Override
	public String toString() {
		return "DerivativeType [code=" + Code + ", name=" + Name + ", IsPriceInPercent=" + IsPriceInPercent
				+ ", LegCount=" + LegCount + ", IsBasic=" + IsBasic + ", UnderlyingClass=" + UnderlyingClass
				+ ", LastUpdateDateTime=" + LastUpdateDateTime + ", "  
				+ myLegs.toString()	+ "]";
	}
	
	public void setCode(String code) {
		Code = code;
	}

	public void setName(String name) {
		Name = name;
	}

	public void setIsPriceInPercent(String isPriceInPercent) {
		IsPriceInPercent = isPriceInPercent;
	}

	public void setLegCount(String legCount) {
		LegCount = legCount;
	}

	public void setIsBasic(String isBasic) {
		IsBasic = isBasic;
	}

	public void setUnderlyingClass(String underlyingClass) {
		UnderlyingClass = underlyingClass;
	}

	public void setLastUpdateDateTime(String lastUpdateDateTime) {
		LastUpdateDateTime = lastUpdateDateTime;
	}

	public void setParameterString(String parameterString) {
		ParameterString = parameterString;
	}

	public void setMyLegs(Legs myLegs) {
		this.myLegs = myLegs;
	}

	public void parseXmlElement(Element root) {
		
		this.parseAttribute(root);
		
		NodeList n1 = root.getChildNodes();
		int lenN1 = n1.getLength();
		for (int i = 0; i < lenNList1; i++) {
////int count = 0;
//			
			Node n1 = nList1.item(i);
			if (n1.getNodeType() == Node.ELEMENT_NODE) {
				this.parseAttribute((Element)n1);
//System.out.println(this.toString());
				
				NodeList nList2 = n1.getChildNodes();
				int lenNList2 = nList2.getLength();

				for (int j = 0; j < lenNList2; j++) {	// ParameterString , Legs
				
					Node n2 = nList2.item(j);
					
					if (n2.getNodeType() == Node.ELEMENT_NODE) {
						String nodeName = n2.getNodeName();
						
						switch (nodeName) {
						case IXmlTag.ParameterString:
							this.ParameterString = n2.getNodeValue();
							break;
						case IXmlTag.Legs:
							myLegs.parseXmlElement((Element)n2);
//System.out.println(myLegs);
							break;
						default:
						}
					}
				}
			}
		}
	}
}
