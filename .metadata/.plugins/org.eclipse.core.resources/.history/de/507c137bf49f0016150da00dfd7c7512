package com.celera.backoffice;

import java.io.File;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;

import com.celera.adapter.DatabaseAdapter;
import com.celera.mongo.entity.Hedge;
import com.celera.mongo.entity.Leg;
import com.celera.mongo.entity.TradeConfo;

public class TCreateInvoice implements Runnable
{
	private static final String PRE_INVOICE_NUMBER = "CEL";
	private static final String PATTERN = " - ";
	private static int invoice_Num = 1;
    private static final NumberFormat nf = new DecimalFormat("##.#");
    private static final String PREFIX_BUYER = "Buyer - ";
    private static final String PREFIX_SELLER = "Seller - ";
	
    private final Date start; 
	private final Date end;
	
	public TCreateInvoice(Date start, Date end)
	{
		this.start = start;
		this.end = end;
	}
	
	
	public static void main(String[] args)
	{
		DatabaseAdapter dba = new DatabaseAdapter();
		dba.start();
		dba.loadHistory();
		
		try
		{
			Thread.sleep(10000);
		} catch (InterruptedException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		Calendar today = Calendar.getInstance();
		today.add(Calendar.DAY_OF_MONTH, -1);
		Date _31 = today.getTime();
		today.add(Calendar.DAY_OF_MONTH, -30);
		Date _1 = today.getTime();
		TCreateInvoice c = new TCreateInvoice(_1, _31);
		c.run();
	}
	
	public void run()
	{
		Map<String, List<TradeConfo>> client2TradeConfo = new HashMap<String, List<TradeConfo>>();

		// (firm + currency) -> trade confo
		List<TradeConfo> dbList = DatabaseAdapter.getHistTradeConfo(start, end);
System.out.println("start");
		
		String key;
		for (TradeConfo e : dbList)
		{
			String curncy = e.getCurncy();
			String buyer = e.getBuyer();
			String firm;
			if (buyer == null)
			{
				String seller = e.getSeller();
				int pos = seller.lastIndexOf(PATTERN);
				firm = (pos > 0) ? seller.substring(0,  pos) : seller;
				key = firm + "_" + curncy;
			} else
			{
				int pos = buyer.lastIndexOf(PATTERN);
				firm = (pos > 0) ? buyer.substring(0,  pos) : buyer;
				key = firm + "_" + curncy;
			}
			List temp = (List) client2TradeConfo.get(key);
			if (temp == null)
			{
				temp = new ArrayList<TradeConfo>();
				client2TradeConfo.put(key, temp);
			}
			temp.add(e);
		}

		Double totalSize = 0d;
		Double totalFee = 0d;
		Double totalHedge = 0d;
		
		String.format("CEL%04d", invoice_Num);

		List<TradeDetail> lTd = new ArrayList<TradeDetail>();
		
		// for each client
		for (Map.Entry<String, List<TradeConfo>> e: client2TradeConfo.entrySet())
		{
			key = e.getKey();
System.out.println(key);			
			// find client info
			List<TradeConfo> tradeConfo = e.getValue();
			TradeDetail tradeDetail = new TradeDetail();
			for (TradeConfo tc : e.getValue())
			{
				tradeDetail.setDate(tc.getTradeDate());	// same format
				tradeDetail.setId(tc.getTradeConfoId());
				tradeDetail.setDescription(tc.getSummary());
				Double size = 0d;
				for (Leg leg: tc.getLegs())
				{
					size += leg.getQty();

				}
				totalSize += size;
				
				Double hedge = 0d;
				for (Hedge h: tc.getHedges())
				{
					hedge += h.getQty();
				}
				totalHedge += hedge;
				
				tradeDetail.setSize(nf.format(size));
				tradeDetail.setHedge(nf.format(hedge));
				
				String buyer = tc.getBuyer();
				if (buyer == null)
				{
					tradeDetail.setReference(PREFIX_SELLER + tc.getSeller());
				} else
				{
					tradeDetail.setReference(PREFIX_BUYER + buyer);
				}
				
				tradeDetail.setFee(BOFormatter.displayFee(tc.getBrokerageFee(), tc.getCurncy()));
				totalFee += tc.getBrokerageFee();
				
				lTd.add(tradeDetail);
			}
			
			TradeDetails td = new TradeDetails();
			td.setTradeDetail(lTd);
			td.setPeriod("OCTOBER, 2016");
			String[] tokens = key.split("_");
			td.setCompany(tokens[0]);
			td.setDescription("October 2016 Total");
			
			print(td);
		}
	}

	public void print(TradeDetails td){
		try
		{
			File file = new File("/home/idbs/workspace/uts/build/UTS_WS_API/celera_cmbos/temp/tradedetails.xml");
			JAXBContext jaxbContext = JAXBContext.newInstance(TradeDetails.class);
			Marshaller jaxbMarshaller = jaxbContext.createMarshaller();

			// output pretty printed
			jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);

//			jaxbMarshaller.marshal(td, file);
			jaxbMarshaller.marshal(td, System.out);

		} catch (JAXBException e)
		{
			e.printStackTrace();
		}

	}
	
}
