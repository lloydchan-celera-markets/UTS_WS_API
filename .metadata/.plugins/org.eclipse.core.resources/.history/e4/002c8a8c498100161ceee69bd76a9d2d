package com.vectails.processor;

import java.io.StringReader;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

import com.vectails.data.Addressees;
import com.vectails.data.AllowedQuoteCreators;
import com.vectails.data.Currencies;
import com.vectails.data.GenericXmlContainer;
import com.vectails.data.IXmlParser;
import com.vectails.data.Currency;
import com.vectails.data.DerivativeType;
import com.vectails.data.DerivativeTypes;
import com.vectails.data.DerivativeTypes_old;
import com.vectails.data.GenericList;
import com.vectails.data.IXmlTag;
import com.vectails.data.IndexFuture;
import com.vectails.data.LastUpdateDateTime;
import com.vectails.data.Underlying;

public class UtsDirectAccessMessage {
	
	private String EntityCode;
	private String ClientCode;
	private String Password;
	private String Command;
	private String SessionId;
	private String ClientVersion;
	
	private LastUpdateDateTime addressee = new LastUpdateDateTime("Addressee", "2000-01-01 00:00:00.000") ;
	private LastUpdateDateTime underlying = new LastUpdateDateTime("Underlying", "2000-01-01 00:00:00.000") ;
	private LastUpdateDateTime derivativeType = new LastUpdateDateTime("DerivativeType", "2000-01-01 00:00:00.000") ;
	private LastUpdateDateTime indexFuture = new LastUpdateDateTime("IndexFuture", "2000-01-01 00:00:00.000") ;
	
//	=\"CELERA\" ClientCode=\"DACTEST\" Password=\"uat\" Command=\"OpenDirectAccessSession\" SessionId=\"7df96e02-e058-4212-a822-bd3cce2a87db\" ClientVersion=\"UtsDacV1.8\"></UtsDirectAccessMessage";
	
	public UtsDirectAccessMessage(String entityCode, String clientCode, String password, String command,
			String sessionId, String clientVersion) {
		EntityCode = entityCode;
		ClientCode = clientCode;
		Password = password;
		Command = command;
		SessionId = sessionId;
		ClientVersion = clientVersion;
	}
	
	public String toXmlString() {
		return "<UtsDirectAccessMessage EntityCode='" + EntityCode + "' ClientCode='" + ClientCode + "' Password='"
				+ Password + "' Command='" + Command + "' SessionId='" + SessionId + "' ClientVersion='" + ClientVersion
				+ "'>" + addressee.toString() + underlying.toString() + derivativeType.toString() + indexFuture.toString()
				+ "</UtsDirectAccessMessage>";
	}
	
	public static void parseXml(String resp) {

		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		DocumentBuilder builder;
		try {
			builder = factory.newDocumentBuilder();
			Document dom = builder.parse(new InputSource(new StringReader(resp)));

			dom.getDocumentElement().normalize();

			Element docEle = dom.getDocumentElement();
Leg curncies = new Leg();
curncies.parseNode(docEle);			
			
			NodeList nl = docEle.getChildNodes();
			if (nl != null && nl.getLength() > 0) {
				for (int i = 0; i < nl.getLength(); i++) {
					if (nl.item(i).getNodeType() == Node.ELEMENT_NODE) {

						Element el = (Element) nl.item(i);
						String nodeName = el.getNodeName();
						switch (nodeName) {
						case IXmlTag.Currencies:
							GenericXmlContainer curncies = new Currencies();
							curncies.parseXmlElement(el);
							
							System.out.println(curncies.toString());
							break;
						case IXmlTag.DerivativeTypes:
							GenericXmlContainer derivateTypes = new DerivativeTypes();
							derivateTypes.parseXmlElement(el);
							
							System.out.println(derivateTypes.toString());
							break;
						case IXmlTag.Underlyings:
							GenericList<Underlying> ul = new GenericList<Underlying>(Underlying.class);
							ul.parseXmlElement(el);
							
							System.out.println(ul.toString());
							break;
						case IXmlTag.IndexFutures: 
							GenericList<IndexFuture> il = new GenericList<IndexFuture>(IndexFuture.class);
							il.parseXmlElement(el);
							
							System.out.println(il.toString());
							break;
						case IXmlTag.AllowedQuoteCreators: 
							AllowedQuoteCreators allowedQuoteCreators = new AllowedQuoteCreators();
							allowedQuoteCreators.parseXmlElement(el);
							
							System.out.println(allowedQuoteCreators.toString());
							break;
						case IXmlTag.Addressees: 
							Addressees addr = new Addressees();
							addr.parseXmlElement(el);
							
							System.out.println(addr.toString());
							break;
						default:
							//throw new IllegalArgumentException("Invalid node type " + nodeName);
						}
								
						// if (el.getNodeName().contains("staff")) {
						// String name =
						// el.getElementsByTagName("name").item(0).getTextContent();
						// String phone =
						// el.getElementsByTagName("phone").item(0).getTextContent();
						// String email =
						// el.getElementsByTagName("email").item(0).getTextContent();
						// String area =
						// el.getElementsByTagName("area").item(0).getTextContent();
						// String city =
						// el.getElementsByTagName("city").item(0).getTextContent();
						// }
					}
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

	}
}
